#####################################################################
# 	Macros
#####################################################################
[gcode_macro G32]
gcode:
    CLEAN_NOZZLE
    G28
    QUAD_GANTRY_LEVEL
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
    
    G0 X175 Y175 Z30 F3600

# print_start macro
[gcode_macro PRINT_START]
gcode:
    {% set TOOL = params.TOOL | default(-1)| int %}
    {% set TOOL_TEMP = params.TOOL_TEMP | default(0) | int %}
    {% set BED_TEMP = params.BED_TEMP | default(0) | int %}
    SKEW_PROFILE LOAD=CaliFlower

    M117 Initializing...
    INITIALIZE_TOOLCHANGER
    STOP_TOOL_PROBE_CRASH_DETECTION

    M117 Heating Bed
    M190 S{BED_TEMP}

    M117 Homing
    G28
    T0

    M117 Quad Gantry Level
    G28
    QUAD_GANTRY_LEVEL
    G92 E0
    G28
    
    # Start fans & light
    SET_FAN_SPEED FAN=controller_right SPEED=0.5
    SET_FAN_SPEED FAN=controller_left SPEED=0.5
    SET_PIN PIN=caselight_left VALUE=0.25
    SET_PIN PIN=caselight_right VALUE=0.25

    M190 S{BED_TEMP}

    BED_MESH_CLEAR
    BED_MESH_CALIBRATE

    # Heats up the nozzle up to target via slicer
    M107                                                                ; Turns off the PT-fan
    
    {% if TOOL >= 0 %}
        M104 T0 S0                                                      ; shutdown T0.  If it's up first it will be heated below.
        T{params.TOOL}
        {% set initialToolTemp = 'T' ~ params.TOOL|string ~ '_TEMP' %}
        M117 Waiting on T{params.TOOL} S{params[initialToolTemp]}C
        M109 S{params[initialToolTemp]}
    {% else %}
        M109 S{TOOL_TEMP}
    {% endif %}
    START_TOOL_PROBE_CRASH_DETECTION

    # Create a purge line and starts the print
    LINE_PURGE
   
[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
   
    M400                                                                ; wait for buffer to clear
    G92 E0                                                              ; zero the extruder
    G1 E-25 F1800                                                       ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                                                 ; absolute positioning
    G0 X175 Y310 Z{z_safe} F20000                                       ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 15} F3600          ; park nozzle at rear
    M107                                                                ; turn off fan
    
    BED_MESH_CLEAR
    SET_SKEW CLEAR=1
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    # Stop fans
    SET_FAN_SPEED FAN=controller_right SPEED=0
    SET_FAN_SPEED FAN=controller_left SPEED=0
    SET_PIN PIN=caselight_left VALUE=0
    SET_PIN PIN=caselight_right VALUE=0
  
[gcode_macro LOAD_FILAMENT]
variable_ignore_min_extrude_temp: True
gcode:
  M117 Loading
  M104 S240
  G90                                                                   ; Absolute pos
  G1 X100 Y20 Z20 F1800                                                 ; Move to center
  M104 S240                                                             ; Heat up the filament
  TEMPERATURE_WAIT SENSOR={printer.toolhead.extruder} MINIMUM=240
  M83                                                                   ; set extruder to relative
  G1 E50 F300                                                           ; extrude 5 cm
  G1 E50 F300                                                           ; extrude 5 cm
  G1 E-4 F1800                                                          ; retract some
  M82                                                                   ; set extruder to absolute
  M400                                                                  ; wait for buffer to clear
  M104 S0                                                               ; Stop heating
  M117 Loading done

[gcode_macro UNLOAD_FILAMENT]
variable_ignore_min_extrude_temp: True
gcode:
  M117 Unloading
  M104 S240                                                             ; Heat up the filament
  TEMPERATURE_WAIT SENSOR={printer.toolhead.extruder} MINIMUM=240
  M83                                                                   ; set extruder to relative
  G1 E5 F500                                                            ; extrude 5 mm
  G1 E-50 F1000                                                         ; retract 5 cm
  G1 E-50 F1000                                                         ; retract 5 cm
  M82                                                                   ; set extruder to absolute
  M400                                                                  ; wait for buffer to clear
  TURN_OFF_HEATERS
  M117 Unloading done

[gcode_macro UNLOAD_ONE_FILAMENT]
gcode:
  M117 Unloading {params.TOOL}
  M109 T{params.TOOL} S240                                              ; Wait until heated
  {% set tool_name = printer.toolchanger.tool_names[params.TOOL|int] %}
  {% set extruder = printer[tool_name].extruder %}
  M104 T{params.TOOL} S240                                              ; Heat up the filament
  TEMPERATURE_WAIT SENSOR={extruder} MINIMUM=240
  ACTIVATE_EXTRUDER EXTRUDER={extruder}
  M83                                                                   ; set extruder to relative
  G1 E5 F500                                                            ; extrude 5 mm
  G1 E-50 F1000                                                         ; retract 5 cm
  G1 E-50 F1000                                                         ; retract 5 cm
  M82                                                                   ; set extruder to absolute
  M400                                                                  ; wait for buffer to clear
  TURN_OFF_HEATERS
  M117 Unloading done

[gcode_macro UNLOAD_ALL_FILAMENT]
gcode:
  {% set tools = printer.toolchanger.tool_names %}
  M117 Unloading
  {% for tool in tools %}
    M104 T{printer[tool].tool_number} S240                              ;Heat up the filament
  {% endfor %}
  {% for tool in tools %}
    M109 T{printer[tool].tool_number} S240                              ;Wait until heated
    ACTIVATE_EXTRUDER EXTRUDER={printer[tool].extruder}
    M83                                                                 ; set extruder to relative
    G1 E5 F500                                                          ; extrude 5 mm
    G1 E-50 F1000                                                       ; retract 5 cm
    G1 E-50 F1000                                                       ; retract 5 cm
  {% endfor %}
  M400                                                                  ; Finish all th emoves
  M82                                                                   ; set extruder to absolute
  TURN_OFF_HEATERS
  M117 Unloading done

[gcode_macro Home_All]
gcode:
    G28

[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

# LED-Control
[gcode_macro _CHAMBERLIGHT_ON]
description: Helper: Light on
gcode:
    SET_PIN PIN=caselight_left VALUE=0.25
    SET_PIN PIN=caselight_right VALUE=0.25
    {action_respond_info("Chamberlight on")}
    
[gcode_macro _CHAMBERLIGHT_OFF]
description: Helper: Light off
gcode:
    SET_PIN PIN=caselight_left VALUE=0
    SET_PIN PIN=caselight_right VALUE=0
    {action_respond_info("Chamberlight off")}
  
[gcode_macro CHAMBERLIGHT]
gcode:
    {% set brightness = printer["output_pin caselight_left"].value %}
    {% if brightness == 0 %}
      _CHAMBERLIGHT_ON
    {% else %}
      _CHAMBERLIGHT_OFF
    {% endif %}